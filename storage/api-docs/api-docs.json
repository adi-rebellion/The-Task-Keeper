{
    "openapi": "3.0.0",
    "info": {
        "title": "Task Keeper API Documentation",
        "contact": {
            "email": "adityanaidu.work@gmail.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "description": "API endpoint to login an existing user with email and password returning a success message or error.",
                "operationId": "3673edffcdc18c06ac5aef5e2219d774",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "description": "User's registered email address.",
                                        "type": "string",
                                        "example": "mohans@example.com"
                                    },
                                    "password": {
                                        "description": "User's password for account authentication.",
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Logged in successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Logged in successfully."
                                        },
                                        "data": {
                                            "properties": {
                                                "user": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 3
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Mohan Sharma"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "mohans@example.com"
                                                        },
                                                        "email_verified_at": {
                                                            "type": "string",
                                                            "example": null,
                                                            "nullable": true
                                                        },
                                                        "created_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2024-07-04T19:52:26.000000Z"
                                                        },
                                                        "updated_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2024-07-04T19:52:26.000000Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
                                                },
                                                "token_type": {
                                                    "type": "string",
                                                    "example": "Bearer"
                                                },
                                                "expires_at": {
                                                    "type": "string",
                                                    "example": "2025-07-04 19:52:53"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, something went wrong. Please try again."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "description": "API endpoint to logout an Auth user returning a success message or error.",
                "operationId": "5e29d25372d83a1ff5c3165a43f3302d",
                "responses": {
                    "200": {
                        "description": "User logged out successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User logged out successfully."
                                        },
                                        "data": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorized"
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, something went wrong. Please try again."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "User Register",
                "description": "API endpoint to register a new user with fields for name, email, password, and confirmation, returning a   success message or error.",
                "operationId": "748a1acc92fb3e56f8f6ace55b5a9d24",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "password_confirmation"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "User's full name",
                                        "type": "string",
                                        "example": "Mohan Sharma"
                                    },
                                    "email": {
                                        "description": "User's email address for registration.",
                                        "type": "string",
                                        "example": "mohans@example.com"
                                    },
                                    "password": {
                                        "description": "User's chosen password for account access.",
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "description": "Re-enter the password to confirm accuracy.",
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User registered successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully."
                                        },
                                        "data": {
                                            "properties": {
                                                "user": {
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Mohan Sharma"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "mohans@example.com"
                                                        },
                                                        "updated_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2024-07-04T16:09:33.000000Z"
                                                        },
                                                        "created_at": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2024-07-04T16:09:33.000000Z"
                                                        },
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 6
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "access_token": {
                                                    "type": "string",
                                                    "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9..."
                                                },
                                                "token_type": {
                                                    "type": "string",
                                                    "example": "Bearer"
                                                },
                                                "expires_at": {
                                                    "type": "string",
                                                    "example": "2025-07-04 16:09:33"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Sorry, something went wrong. Please try again."
                                        },
                                        "data": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        },
                                        "errors": {
                                            "type": "object",
                                            "example": null,
                                            "nullable": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get list of tasks",
                "description": "API endpoint to retrieve tasks with optional filters including status, start date, due date, priority, note content, note created at, perPage, order, and orderBy. Filters are optional; if values for any field are empty or null, they won't be considered for filtering.Default: Priority- High First",
                "operationId": "getTasks",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter tasks by their status ('New', 'Incomplete', 'Complete')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "New",
                                "Incomplete",
                                "Complete"
                            ]
                        }
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "description": "Filter tasks created on or after a specified date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "due_date",
                        "in": "query",
                        "description": "Filter tasks due on or before a specified date.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "priority",
                        "in": "query",
                        "description": "Filter tasks by priority level (e.g., 'High', 'Medium', 'Low').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "High",
                            "enum": [
                                "High",
                                "Low",
                                "Medium"
                            ]
                        }
                    },
                    {
                        "name": "notes",
                        "in": "query",
                        "description": "Include or exclude tasks with attached notes.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "note_content",
                        "in": "query",
                        "description": "Filter tasks by content within attached notes.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "note_created_at",
                        "in": "query",
                        "description": "Filter by note creation date",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "Number of tasks to retrieve per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sorting order ('asc' for ascending, 'desc' for descending).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "desc"
                        }
                    },
                    {
                        "name": "orderBy",
                        "in": "query",
                        "description": "Field to order tasks by (e.g., 'due_date', 'priority').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a task with multiple notes and attachments",
                "description": "Creates a task with multiple notes, each having multiple attachments.",
                "operationId": "createTaskWithNotesAndAttachments",
                "requestBody": {
                    "description": "Task data with notes and attachments",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "subject": {
                                        "description": "Subject of the task",
                                        "type": "string"
                                    },
                                    "start_date": {
                                        "description": "Start date of the task (YYYY-MM-DD)",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "due_date": {
                                        "description": "Due date of the task (YYYY-MM-DD)",
                                        "type": "string",
                                        "format": "date"
                                    },
                                    "status": {
                                        "description": "Status of the task",
                                        "type": "string"
                                    },
                                    "priority": {
                                        "description": "Priority of the task",
                                        "type": "string"
                                    },
                                    "notes": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Note"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task created successfully"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Note": {
                "properties": {
                    "subject": {
                        "description": "Subject of the note",
                        "type": "string"
                    },
                    "note": {
                        "description": "Content of the note",
                        "type": "string"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "description": "Attachment file",
                            "type": "string",
                            "format": "binary"
                        }
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearer": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Tasks",
            "description": "Tasks"
        }
    ]
}